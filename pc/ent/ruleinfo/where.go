// Code generated by ent, DO NOT EDIT.

package ruleinfo

import (
	"plugin_center/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldID, id))
}

// Module applies equality check predicate on the "module" field. It's identical to ModuleEQ.
func Module(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldModule, v))
}

// PluginType applies equality check predicate on the "plugin_type" field. It's identical to PluginTypeEQ.
func PluginType(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldPluginType, v))
}

// FilterType applies equality check predicate on the "filter_type" field. It's identical to FilterTypeEQ.
func FilterType(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldFilterType, v))
}

// RuleName applies equality check predicate on the "rule_name" field. It's identical to RuleNameEQ.
func RuleName(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldRuleName, v))
}

// RuleBody applies equality check predicate on the "rule_body" field. It's identical to RuleBodyEQ.
func RuleBody(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldRuleBody, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldCreateTime, v))
}

// Enable applies equality check predicate on the "enable" field. It's identical to EnableEQ.
func Enable(v bool) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldEnable, v))
}

// ModuleEQ applies the EQ predicate on the "module" field.
func ModuleEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldModule, v))
}

// ModuleNEQ applies the NEQ predicate on the "module" field.
func ModuleNEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldModule, v))
}

// ModuleIn applies the In predicate on the "module" field.
func ModuleIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldModule, vs...))
}

// ModuleNotIn applies the NotIn predicate on the "module" field.
func ModuleNotIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldModule, vs...))
}

// ModuleGT applies the GT predicate on the "module" field.
func ModuleGT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldModule, v))
}

// ModuleGTE applies the GTE predicate on the "module" field.
func ModuleGTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldModule, v))
}

// ModuleLT applies the LT predicate on the "module" field.
func ModuleLT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldModule, v))
}

// ModuleLTE applies the LTE predicate on the "module" field.
func ModuleLTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldModule, v))
}

// ModuleContains applies the Contains predicate on the "module" field.
func ModuleContains(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContains(FieldModule, v))
}

// ModuleHasPrefix applies the HasPrefix predicate on the "module" field.
func ModuleHasPrefix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasPrefix(FieldModule, v))
}

// ModuleHasSuffix applies the HasSuffix predicate on the "module" field.
func ModuleHasSuffix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasSuffix(FieldModule, v))
}

// ModuleEqualFold applies the EqualFold predicate on the "module" field.
func ModuleEqualFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEqualFold(FieldModule, v))
}

// ModuleContainsFold applies the ContainsFold predicate on the "module" field.
func ModuleContainsFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContainsFold(FieldModule, v))
}

// PluginTypeEQ applies the EQ predicate on the "plugin_type" field.
func PluginTypeEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldPluginType, v))
}

// PluginTypeNEQ applies the NEQ predicate on the "plugin_type" field.
func PluginTypeNEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldPluginType, v))
}

// PluginTypeIn applies the In predicate on the "plugin_type" field.
func PluginTypeIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldPluginType, vs...))
}

// PluginTypeNotIn applies the NotIn predicate on the "plugin_type" field.
func PluginTypeNotIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldPluginType, vs...))
}

// PluginTypeGT applies the GT predicate on the "plugin_type" field.
func PluginTypeGT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldPluginType, v))
}

// PluginTypeGTE applies the GTE predicate on the "plugin_type" field.
func PluginTypeGTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldPluginType, v))
}

// PluginTypeLT applies the LT predicate on the "plugin_type" field.
func PluginTypeLT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldPluginType, v))
}

// PluginTypeLTE applies the LTE predicate on the "plugin_type" field.
func PluginTypeLTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldPluginType, v))
}

// PluginTypeContains applies the Contains predicate on the "plugin_type" field.
func PluginTypeContains(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContains(FieldPluginType, v))
}

// PluginTypeHasPrefix applies the HasPrefix predicate on the "plugin_type" field.
func PluginTypeHasPrefix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasPrefix(FieldPluginType, v))
}

// PluginTypeHasSuffix applies the HasSuffix predicate on the "plugin_type" field.
func PluginTypeHasSuffix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasSuffix(FieldPluginType, v))
}

// PluginTypeEqualFold applies the EqualFold predicate on the "plugin_type" field.
func PluginTypeEqualFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEqualFold(FieldPluginType, v))
}

// PluginTypeContainsFold applies the ContainsFold predicate on the "plugin_type" field.
func PluginTypeContainsFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContainsFold(FieldPluginType, v))
}

// FilterTypeEQ applies the EQ predicate on the "filter_type" field.
func FilterTypeEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldFilterType, v))
}

// FilterTypeNEQ applies the NEQ predicate on the "filter_type" field.
func FilterTypeNEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldFilterType, v))
}

// FilterTypeIn applies the In predicate on the "filter_type" field.
func FilterTypeIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldFilterType, vs...))
}

// FilterTypeNotIn applies the NotIn predicate on the "filter_type" field.
func FilterTypeNotIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldFilterType, vs...))
}

// FilterTypeGT applies the GT predicate on the "filter_type" field.
func FilterTypeGT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldFilterType, v))
}

// FilterTypeGTE applies the GTE predicate on the "filter_type" field.
func FilterTypeGTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldFilterType, v))
}

// FilterTypeLT applies the LT predicate on the "filter_type" field.
func FilterTypeLT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldFilterType, v))
}

// FilterTypeLTE applies the LTE predicate on the "filter_type" field.
func FilterTypeLTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldFilterType, v))
}

// FilterTypeContains applies the Contains predicate on the "filter_type" field.
func FilterTypeContains(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContains(FieldFilterType, v))
}

// FilterTypeHasPrefix applies the HasPrefix predicate on the "filter_type" field.
func FilterTypeHasPrefix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasPrefix(FieldFilterType, v))
}

// FilterTypeHasSuffix applies the HasSuffix predicate on the "filter_type" field.
func FilterTypeHasSuffix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasSuffix(FieldFilterType, v))
}

// FilterTypeEqualFold applies the EqualFold predicate on the "filter_type" field.
func FilterTypeEqualFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEqualFold(FieldFilterType, v))
}

// FilterTypeContainsFold applies the ContainsFold predicate on the "filter_type" field.
func FilterTypeContainsFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContainsFold(FieldFilterType, v))
}

// RuleNameEQ applies the EQ predicate on the "rule_name" field.
func RuleNameEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldRuleName, v))
}

// RuleNameNEQ applies the NEQ predicate on the "rule_name" field.
func RuleNameNEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldRuleName, v))
}

// RuleNameIn applies the In predicate on the "rule_name" field.
func RuleNameIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldRuleName, vs...))
}

// RuleNameNotIn applies the NotIn predicate on the "rule_name" field.
func RuleNameNotIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldRuleName, vs...))
}

// RuleNameGT applies the GT predicate on the "rule_name" field.
func RuleNameGT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldRuleName, v))
}

// RuleNameGTE applies the GTE predicate on the "rule_name" field.
func RuleNameGTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldRuleName, v))
}

// RuleNameLT applies the LT predicate on the "rule_name" field.
func RuleNameLT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldRuleName, v))
}

// RuleNameLTE applies the LTE predicate on the "rule_name" field.
func RuleNameLTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldRuleName, v))
}

// RuleNameContains applies the Contains predicate on the "rule_name" field.
func RuleNameContains(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContains(FieldRuleName, v))
}

// RuleNameHasPrefix applies the HasPrefix predicate on the "rule_name" field.
func RuleNameHasPrefix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasPrefix(FieldRuleName, v))
}

// RuleNameHasSuffix applies the HasSuffix predicate on the "rule_name" field.
func RuleNameHasSuffix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasSuffix(FieldRuleName, v))
}

// RuleNameEqualFold applies the EqualFold predicate on the "rule_name" field.
func RuleNameEqualFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEqualFold(FieldRuleName, v))
}

// RuleNameContainsFold applies the ContainsFold predicate on the "rule_name" field.
func RuleNameContainsFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContainsFold(FieldRuleName, v))
}

// RuleBodyEQ applies the EQ predicate on the "rule_body" field.
func RuleBodyEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldRuleBody, v))
}

// RuleBodyNEQ applies the NEQ predicate on the "rule_body" field.
func RuleBodyNEQ(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldRuleBody, v))
}

// RuleBodyIn applies the In predicate on the "rule_body" field.
func RuleBodyIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldRuleBody, vs...))
}

// RuleBodyNotIn applies the NotIn predicate on the "rule_body" field.
func RuleBodyNotIn(vs ...string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldRuleBody, vs...))
}

// RuleBodyGT applies the GT predicate on the "rule_body" field.
func RuleBodyGT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldRuleBody, v))
}

// RuleBodyGTE applies the GTE predicate on the "rule_body" field.
func RuleBodyGTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldRuleBody, v))
}

// RuleBodyLT applies the LT predicate on the "rule_body" field.
func RuleBodyLT(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldRuleBody, v))
}

// RuleBodyLTE applies the LTE predicate on the "rule_body" field.
func RuleBodyLTE(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldRuleBody, v))
}

// RuleBodyContains applies the Contains predicate on the "rule_body" field.
func RuleBodyContains(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContains(FieldRuleBody, v))
}

// RuleBodyHasPrefix applies the HasPrefix predicate on the "rule_body" field.
func RuleBodyHasPrefix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasPrefix(FieldRuleBody, v))
}

// RuleBodyHasSuffix applies the HasSuffix predicate on the "rule_body" field.
func RuleBodyHasSuffix(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldHasSuffix(FieldRuleBody, v))
}

// RuleBodyEqualFold applies the EqualFold predicate on the "rule_body" field.
func RuleBodyEqualFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEqualFold(FieldRuleBody, v))
}

// RuleBodyContainsFold applies the ContainsFold predicate on the "rule_body" field.
func RuleBodyContainsFold(v string) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldContainsFold(FieldRuleBody, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldLTE(FieldCreateTime, v))
}

// EnableEQ applies the EQ predicate on the "enable" field.
func EnableEQ(v bool) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldEQ(FieldEnable, v))
}

// EnableNEQ applies the NEQ predicate on the "enable" field.
func EnableNEQ(v bool) predicate.RuleInfo {
	return predicate.RuleInfo(sql.FieldNEQ(FieldEnable, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RuleInfo) predicate.RuleInfo {
	return predicate.RuleInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RuleInfo) predicate.RuleInfo {
	return predicate.RuleInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RuleInfo) predicate.RuleInfo {
	return predicate.RuleInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
