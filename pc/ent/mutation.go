// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"plugin_center/ent/predicate"
	"plugin_center/ent/ruleinfo"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRuleInfo = "RuleInfo"
)

// RuleInfoMutation represents an operation that mutates the RuleInfo nodes in the graph.
type RuleInfoMutation struct {
	config
	op            Op
	typ           string
	id            *int
	module        *string
	plugin_type   *string
	filter_type   *string
	rule_name     *string
	rule_body     *string
	create_time   *time.Time
	enable        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RuleInfo, error)
	predicates    []predicate.RuleInfo
}

var _ ent.Mutation = (*RuleInfoMutation)(nil)

// ruleinfoOption allows management of the mutation configuration using functional options.
type ruleinfoOption func(*RuleInfoMutation)

// newRuleInfoMutation creates new mutation for the RuleInfo entity.
func newRuleInfoMutation(c config, op Op, opts ...ruleinfoOption) *RuleInfoMutation {
	m := &RuleInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeRuleInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRuleInfoID sets the ID field of the mutation.
func withRuleInfoID(id int) ruleinfoOption {
	return func(m *RuleInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *RuleInfo
		)
		m.oldValue = func(ctx context.Context) (*RuleInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RuleInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRuleInfo sets the old RuleInfo of the mutation.
func withRuleInfo(node *RuleInfo) ruleinfoOption {
	return func(m *RuleInfoMutation) {
		m.oldValue = func(context.Context) (*RuleInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RuleInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RuleInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RuleInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RuleInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RuleInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetModule sets the "module" field.
func (m *RuleInfoMutation) SetModule(s string) {
	m.module = &s
}

// Module returns the value of the "module" field in the mutation.
func (m *RuleInfoMutation) Module() (r string, exists bool) {
	v := m.module
	if v == nil {
		return
	}
	return *v, true
}

// OldModule returns the old "module" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldModule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModule: %w", err)
	}
	return oldValue.Module, nil
}

// ResetModule resets all changes to the "module" field.
func (m *RuleInfoMutation) ResetModule() {
	m.module = nil
}

// SetPluginType sets the "plugin_type" field.
func (m *RuleInfoMutation) SetPluginType(s string) {
	m.plugin_type = &s
}

// PluginType returns the value of the "plugin_type" field in the mutation.
func (m *RuleInfoMutation) PluginType() (r string, exists bool) {
	v := m.plugin_type
	if v == nil {
		return
	}
	return *v, true
}

// OldPluginType returns the old "plugin_type" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldPluginType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPluginType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPluginType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPluginType: %w", err)
	}
	return oldValue.PluginType, nil
}

// ResetPluginType resets all changes to the "plugin_type" field.
func (m *RuleInfoMutation) ResetPluginType() {
	m.plugin_type = nil
}

// SetFilterType sets the "filter_type" field.
func (m *RuleInfoMutation) SetFilterType(s string) {
	m.filter_type = &s
}

// FilterType returns the value of the "filter_type" field in the mutation.
func (m *RuleInfoMutation) FilterType() (r string, exists bool) {
	v := m.filter_type
	if v == nil {
		return
	}
	return *v, true
}

// OldFilterType returns the old "filter_type" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldFilterType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilterType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilterType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilterType: %w", err)
	}
	return oldValue.FilterType, nil
}

// ResetFilterType resets all changes to the "filter_type" field.
func (m *RuleInfoMutation) ResetFilterType() {
	m.filter_type = nil
}

// SetRuleName sets the "rule_name" field.
func (m *RuleInfoMutation) SetRuleName(s string) {
	m.rule_name = &s
}

// RuleName returns the value of the "rule_name" field in the mutation.
func (m *RuleInfoMutation) RuleName() (r string, exists bool) {
	v := m.rule_name
	if v == nil {
		return
	}
	return *v, true
}

// OldRuleName returns the old "rule_name" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldRuleName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuleName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuleName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuleName: %w", err)
	}
	return oldValue.RuleName, nil
}

// ResetRuleName resets all changes to the "rule_name" field.
func (m *RuleInfoMutation) ResetRuleName() {
	m.rule_name = nil
}

// SetRuleBody sets the "rule_body" field.
func (m *RuleInfoMutation) SetRuleBody(s string) {
	m.rule_body = &s
}

// RuleBody returns the value of the "rule_body" field in the mutation.
func (m *RuleInfoMutation) RuleBody() (r string, exists bool) {
	v := m.rule_body
	if v == nil {
		return
	}
	return *v, true
}

// OldRuleBody returns the old "rule_body" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldRuleBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuleBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuleBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuleBody: %w", err)
	}
	return oldValue.RuleBody, nil
}

// ResetRuleBody resets all changes to the "rule_body" field.
func (m *RuleInfoMutation) ResetRuleBody() {
	m.rule_body = nil
}

// SetCreateTime sets the "create_time" field.
func (m *RuleInfoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *RuleInfoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *RuleInfoMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetEnable sets the "enable" field.
func (m *RuleInfoMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *RuleInfoMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the RuleInfo entity.
// If the RuleInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RuleInfoMutation) OldEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ResetEnable resets all changes to the "enable" field.
func (m *RuleInfoMutation) ResetEnable() {
	m.enable = nil
}

// Where appends a list predicates to the RuleInfoMutation builder.
func (m *RuleInfoMutation) Where(ps ...predicate.RuleInfo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RuleInfoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RuleInfoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RuleInfo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RuleInfoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RuleInfoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RuleInfo).
func (m *RuleInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RuleInfoMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.module != nil {
		fields = append(fields, ruleinfo.FieldModule)
	}
	if m.plugin_type != nil {
		fields = append(fields, ruleinfo.FieldPluginType)
	}
	if m.filter_type != nil {
		fields = append(fields, ruleinfo.FieldFilterType)
	}
	if m.rule_name != nil {
		fields = append(fields, ruleinfo.FieldRuleName)
	}
	if m.rule_body != nil {
		fields = append(fields, ruleinfo.FieldRuleBody)
	}
	if m.create_time != nil {
		fields = append(fields, ruleinfo.FieldCreateTime)
	}
	if m.enable != nil {
		fields = append(fields, ruleinfo.FieldEnable)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RuleInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ruleinfo.FieldModule:
		return m.Module()
	case ruleinfo.FieldPluginType:
		return m.PluginType()
	case ruleinfo.FieldFilterType:
		return m.FilterType()
	case ruleinfo.FieldRuleName:
		return m.RuleName()
	case ruleinfo.FieldRuleBody:
		return m.RuleBody()
	case ruleinfo.FieldCreateTime:
		return m.CreateTime()
	case ruleinfo.FieldEnable:
		return m.Enable()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RuleInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ruleinfo.FieldModule:
		return m.OldModule(ctx)
	case ruleinfo.FieldPluginType:
		return m.OldPluginType(ctx)
	case ruleinfo.FieldFilterType:
		return m.OldFilterType(ctx)
	case ruleinfo.FieldRuleName:
		return m.OldRuleName(ctx)
	case ruleinfo.FieldRuleBody:
		return m.OldRuleBody(ctx)
	case ruleinfo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case ruleinfo.FieldEnable:
		return m.OldEnable(ctx)
	}
	return nil, fmt.Errorf("unknown RuleInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ruleinfo.FieldModule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModule(v)
		return nil
	case ruleinfo.FieldPluginType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPluginType(v)
		return nil
	case ruleinfo.FieldFilterType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilterType(v)
		return nil
	case ruleinfo.FieldRuleName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuleName(v)
		return nil
	case ruleinfo.FieldRuleBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuleBody(v)
		return nil
	case ruleinfo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case ruleinfo.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	}
	return fmt.Errorf("unknown RuleInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RuleInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RuleInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RuleInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RuleInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RuleInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RuleInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RuleInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RuleInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RuleInfoMutation) ResetField(name string) error {
	switch name {
	case ruleinfo.FieldModule:
		m.ResetModule()
		return nil
	case ruleinfo.FieldPluginType:
		m.ResetPluginType()
		return nil
	case ruleinfo.FieldFilterType:
		m.ResetFilterType()
		return nil
	case ruleinfo.FieldRuleName:
		m.ResetRuleName()
		return nil
	case ruleinfo.FieldRuleBody:
		m.ResetRuleBody()
		return nil
	case ruleinfo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case ruleinfo.FieldEnable:
		m.ResetEnable()
		return nil
	}
	return fmt.Errorf("unknown RuleInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RuleInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RuleInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RuleInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RuleInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RuleInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RuleInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RuleInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RuleInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RuleInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RuleInfo edge %s", name)
}
