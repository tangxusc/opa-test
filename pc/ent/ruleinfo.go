// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"plugin_center/ent/ruleinfo"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// RuleInfo is the model entity for the RuleInfo schema.
type RuleInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 模块
	Module string `json:"module,omitempty"`
	// 插件类型
	PluginType string `json:"plugin_type,omitempty"`
	// 过滤器类型
	FilterType string `json:"filter_type,omitempty"`
	// 规则名称
	RuleName string `json:"rule_name,omitempty"`
	// 规则内容
	RuleBody string `json:"rule_body,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 是否启用
	Enable bool `json:"enable,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RuleInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ruleinfo.FieldEnable:
			values[i] = new(sql.NullBool)
		case ruleinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case ruleinfo.FieldModule, ruleinfo.FieldPluginType, ruleinfo.FieldFilterType, ruleinfo.FieldRuleName, ruleinfo.FieldRuleBody:
			values[i] = new(sql.NullString)
		case ruleinfo.FieldCreateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RuleInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RuleInfo fields.
func (ri *RuleInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ruleinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ri.ID = int(value.Int64)
		case ruleinfo.FieldModule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field module", values[i])
			} else if value.Valid {
				ri.Module = value.String
			}
		case ruleinfo.FieldPluginType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plugin_type", values[i])
			} else if value.Valid {
				ri.PluginType = value.String
			}
		case ruleinfo.FieldFilterType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field filter_type", values[i])
			} else if value.Valid {
				ri.FilterType = value.String
			}
		case ruleinfo.FieldRuleName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_name", values[i])
			} else if value.Valid {
				ri.RuleName = value.String
			}
		case ruleinfo.FieldRuleBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_body", values[i])
			} else if value.Valid {
				ri.RuleBody = value.String
			}
		case ruleinfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ri.CreateTime = value.Time
			}
		case ruleinfo.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				ri.Enable = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RuleInfo.
// Note that you need to call RuleInfo.Unwrap() before calling this method if this RuleInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RuleInfo) Update() *RuleInfoUpdateOne {
	return NewRuleInfoClient(ri.config).UpdateOne(ri)
}

// Unwrap unwraps the RuleInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ri *RuleInfo) Unwrap() *RuleInfo {
	_tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RuleInfo is not a transactional entity")
	}
	ri.config.driver = _tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RuleInfo) String() string {
	var builder strings.Builder
	builder.WriteString("RuleInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ri.ID))
	builder.WriteString("module=")
	builder.WriteString(ri.Module)
	builder.WriteString(", ")
	builder.WriteString("plugin_type=")
	builder.WriteString(ri.PluginType)
	builder.WriteString(", ")
	builder.WriteString("filter_type=")
	builder.WriteString(ri.FilterType)
	builder.WriteString(", ")
	builder.WriteString("rule_name=")
	builder.WriteString(ri.RuleName)
	builder.WriteString(", ")
	builder.WriteString("rule_body=")
	builder.WriteString(ri.RuleBody)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ri.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", ri.Enable))
	builder.WriteByte(')')
	return builder.String()
}

// RuleInfos is a parsable slice of RuleInfo.
type RuleInfos []*RuleInfo
