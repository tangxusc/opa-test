// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"plugin_center/ent/predicate"
	"plugin_center/ent/ruleinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleInfoUpdate is the builder for updating RuleInfo entities.
type RuleInfoUpdate struct {
	config
	hooks    []Hook
	mutation *RuleInfoMutation
}

// Where appends a list predicates to the RuleInfoUpdate builder.
func (riu *RuleInfoUpdate) Where(ps ...predicate.RuleInfo) *RuleInfoUpdate {
	riu.mutation.Where(ps...)
	return riu
}

// SetModule sets the "module" field.
func (riu *RuleInfoUpdate) SetModule(s string) *RuleInfoUpdate {
	riu.mutation.SetModule(s)
	return riu
}

// SetPluginType sets the "plugin_type" field.
func (riu *RuleInfoUpdate) SetPluginType(s string) *RuleInfoUpdate {
	riu.mutation.SetPluginType(s)
	return riu
}

// SetFilterType sets the "filter_type" field.
func (riu *RuleInfoUpdate) SetFilterType(s string) *RuleInfoUpdate {
	riu.mutation.SetFilterType(s)
	return riu
}

// SetRuleName sets the "rule_name" field.
func (riu *RuleInfoUpdate) SetRuleName(s string) *RuleInfoUpdate {
	riu.mutation.SetRuleName(s)
	return riu
}

// SetRuleBody sets the "rule_body" field.
func (riu *RuleInfoUpdate) SetRuleBody(s string) *RuleInfoUpdate {
	riu.mutation.SetRuleBody(s)
	return riu
}

// SetCreateTime sets the "create_time" field.
func (riu *RuleInfoUpdate) SetCreateTime(t time.Time) *RuleInfoUpdate {
	riu.mutation.SetCreateTime(t)
	return riu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (riu *RuleInfoUpdate) SetNillableCreateTime(t *time.Time) *RuleInfoUpdate {
	if t != nil {
		riu.SetCreateTime(*t)
	}
	return riu
}

// SetEnable sets the "enable" field.
func (riu *RuleInfoUpdate) SetEnable(b bool) *RuleInfoUpdate {
	riu.mutation.SetEnable(b)
	return riu
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (riu *RuleInfoUpdate) SetNillableEnable(b *bool) *RuleInfoUpdate {
	if b != nil {
		riu.SetEnable(*b)
	}
	return riu
}

// Mutation returns the RuleInfoMutation object of the builder.
func (riu *RuleInfoUpdate) Mutation() *RuleInfoMutation {
	return riu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (riu *RuleInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, RuleInfoMutation](ctx, riu.sqlSave, riu.mutation, riu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riu *RuleInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := riu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (riu *RuleInfoUpdate) Exec(ctx context.Context) error {
	_, err := riu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riu *RuleInfoUpdate) ExecX(ctx context.Context) {
	if err := riu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (riu *RuleInfoUpdate) check() error {
	if v, ok := riu.mutation.Module(); ok {
		if err := ruleinfo.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.module": %w`, err)}
		}
	}
	if v, ok := riu.mutation.PluginType(); ok {
		if err := ruleinfo.PluginTypeValidator(v); err != nil {
			return &ValidationError{Name: "plugin_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.plugin_type": %w`, err)}
		}
	}
	if v, ok := riu.mutation.FilterType(); ok {
		if err := ruleinfo.FilterTypeValidator(v); err != nil {
			return &ValidationError{Name: "filter_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.filter_type": %w`, err)}
		}
	}
	if v, ok := riu.mutation.RuleName(); ok {
		if err := ruleinfo.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_name": %w`, err)}
		}
	}
	if v, ok := riu.mutation.RuleBody(); ok {
		if err := ruleinfo.RuleBodyValidator(v); err != nil {
			return &ValidationError{Name: "rule_body", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_body": %w`, err)}
		}
	}
	return nil
}

func (riu *RuleInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := riu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruleinfo.Table, ruleinfo.Columns, sqlgraph.NewFieldSpec(ruleinfo.FieldID, field.TypeInt))
	if ps := riu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riu.mutation.Module(); ok {
		_spec.SetField(ruleinfo.FieldModule, field.TypeString, value)
	}
	if value, ok := riu.mutation.PluginType(); ok {
		_spec.SetField(ruleinfo.FieldPluginType, field.TypeString, value)
	}
	if value, ok := riu.mutation.FilterType(); ok {
		_spec.SetField(ruleinfo.FieldFilterType, field.TypeString, value)
	}
	if value, ok := riu.mutation.RuleName(); ok {
		_spec.SetField(ruleinfo.FieldRuleName, field.TypeString, value)
	}
	if value, ok := riu.mutation.RuleBody(); ok {
		_spec.SetField(ruleinfo.FieldRuleBody, field.TypeString, value)
	}
	if value, ok := riu.mutation.CreateTime(); ok {
		_spec.SetField(ruleinfo.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := riu.mutation.Enable(); ok {
		_spec.SetField(ruleinfo.FieldEnable, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, riu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	riu.mutation.done = true
	return n, nil
}

// RuleInfoUpdateOne is the builder for updating a single RuleInfo entity.
type RuleInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RuleInfoMutation
}

// SetModule sets the "module" field.
func (riuo *RuleInfoUpdateOne) SetModule(s string) *RuleInfoUpdateOne {
	riuo.mutation.SetModule(s)
	return riuo
}

// SetPluginType sets the "plugin_type" field.
func (riuo *RuleInfoUpdateOne) SetPluginType(s string) *RuleInfoUpdateOne {
	riuo.mutation.SetPluginType(s)
	return riuo
}

// SetFilterType sets the "filter_type" field.
func (riuo *RuleInfoUpdateOne) SetFilterType(s string) *RuleInfoUpdateOne {
	riuo.mutation.SetFilterType(s)
	return riuo
}

// SetRuleName sets the "rule_name" field.
func (riuo *RuleInfoUpdateOne) SetRuleName(s string) *RuleInfoUpdateOne {
	riuo.mutation.SetRuleName(s)
	return riuo
}

// SetRuleBody sets the "rule_body" field.
func (riuo *RuleInfoUpdateOne) SetRuleBody(s string) *RuleInfoUpdateOne {
	riuo.mutation.SetRuleBody(s)
	return riuo
}

// SetCreateTime sets the "create_time" field.
func (riuo *RuleInfoUpdateOne) SetCreateTime(t time.Time) *RuleInfoUpdateOne {
	riuo.mutation.SetCreateTime(t)
	return riuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (riuo *RuleInfoUpdateOne) SetNillableCreateTime(t *time.Time) *RuleInfoUpdateOne {
	if t != nil {
		riuo.SetCreateTime(*t)
	}
	return riuo
}

// SetEnable sets the "enable" field.
func (riuo *RuleInfoUpdateOne) SetEnable(b bool) *RuleInfoUpdateOne {
	riuo.mutation.SetEnable(b)
	return riuo
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (riuo *RuleInfoUpdateOne) SetNillableEnable(b *bool) *RuleInfoUpdateOne {
	if b != nil {
		riuo.SetEnable(*b)
	}
	return riuo
}

// Mutation returns the RuleInfoMutation object of the builder.
func (riuo *RuleInfoUpdateOne) Mutation() *RuleInfoMutation {
	return riuo.mutation
}

// Where appends a list predicates to the RuleInfoUpdate builder.
func (riuo *RuleInfoUpdateOne) Where(ps ...predicate.RuleInfo) *RuleInfoUpdateOne {
	riuo.mutation.Where(ps...)
	return riuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (riuo *RuleInfoUpdateOne) Select(field string, fields ...string) *RuleInfoUpdateOne {
	riuo.fields = append([]string{field}, fields...)
	return riuo
}

// Save executes the query and returns the updated RuleInfo entity.
func (riuo *RuleInfoUpdateOne) Save(ctx context.Context) (*RuleInfo, error) {
	return withHooks[*RuleInfo, RuleInfoMutation](ctx, riuo.sqlSave, riuo.mutation, riuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (riuo *RuleInfoUpdateOne) SaveX(ctx context.Context) *RuleInfo {
	node, err := riuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (riuo *RuleInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := riuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (riuo *RuleInfoUpdateOne) ExecX(ctx context.Context) {
	if err := riuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (riuo *RuleInfoUpdateOne) check() error {
	if v, ok := riuo.mutation.Module(); ok {
		if err := ruleinfo.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.module": %w`, err)}
		}
	}
	if v, ok := riuo.mutation.PluginType(); ok {
		if err := ruleinfo.PluginTypeValidator(v); err != nil {
			return &ValidationError{Name: "plugin_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.plugin_type": %w`, err)}
		}
	}
	if v, ok := riuo.mutation.FilterType(); ok {
		if err := ruleinfo.FilterTypeValidator(v); err != nil {
			return &ValidationError{Name: "filter_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.filter_type": %w`, err)}
		}
	}
	if v, ok := riuo.mutation.RuleName(); ok {
		if err := ruleinfo.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_name": %w`, err)}
		}
	}
	if v, ok := riuo.mutation.RuleBody(); ok {
		if err := ruleinfo.RuleBodyValidator(v); err != nil {
			return &ValidationError{Name: "rule_body", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_body": %w`, err)}
		}
	}
	return nil
}

func (riuo *RuleInfoUpdateOne) sqlSave(ctx context.Context) (_node *RuleInfo, err error) {
	if err := riuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ruleinfo.Table, ruleinfo.Columns, sqlgraph.NewFieldSpec(ruleinfo.FieldID, field.TypeInt))
	id, ok := riuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RuleInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := riuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ruleinfo.FieldID)
		for _, f := range fields {
			if !ruleinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ruleinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := riuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := riuo.mutation.Module(); ok {
		_spec.SetField(ruleinfo.FieldModule, field.TypeString, value)
	}
	if value, ok := riuo.mutation.PluginType(); ok {
		_spec.SetField(ruleinfo.FieldPluginType, field.TypeString, value)
	}
	if value, ok := riuo.mutation.FilterType(); ok {
		_spec.SetField(ruleinfo.FieldFilterType, field.TypeString, value)
	}
	if value, ok := riuo.mutation.RuleName(); ok {
		_spec.SetField(ruleinfo.FieldRuleName, field.TypeString, value)
	}
	if value, ok := riuo.mutation.RuleBody(); ok {
		_spec.SetField(ruleinfo.FieldRuleBody, field.TypeString, value)
	}
	if value, ok := riuo.mutation.CreateTime(); ok {
		_spec.SetField(ruleinfo.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := riuo.mutation.Enable(); ok {
		_spec.SetField(ruleinfo.FieldEnable, field.TypeBool, value)
	}
	_node = &RuleInfo{config: riuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, riuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ruleinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	riuo.mutation.done = true
	return _node, nil
}
