// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"plugin_center/ent/ruleinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RuleInfoCreate is the builder for creating a RuleInfo entity.
type RuleInfoCreate struct {
	config
	mutation *RuleInfoMutation
	hooks    []Hook
}

// SetModule sets the "module" field.
func (ric *RuleInfoCreate) SetModule(s string) *RuleInfoCreate {
	ric.mutation.SetModule(s)
	return ric
}

// SetPluginType sets the "plugin_type" field.
func (ric *RuleInfoCreate) SetPluginType(s string) *RuleInfoCreate {
	ric.mutation.SetPluginType(s)
	return ric
}

// SetFilterType sets the "filter_type" field.
func (ric *RuleInfoCreate) SetFilterType(s string) *RuleInfoCreate {
	ric.mutation.SetFilterType(s)
	return ric
}

// SetRuleName sets the "rule_name" field.
func (ric *RuleInfoCreate) SetRuleName(s string) *RuleInfoCreate {
	ric.mutation.SetRuleName(s)
	return ric
}

// SetRuleBody sets the "rule_body" field.
func (ric *RuleInfoCreate) SetRuleBody(s string) *RuleInfoCreate {
	ric.mutation.SetRuleBody(s)
	return ric
}

// SetCreateTime sets the "create_time" field.
func (ric *RuleInfoCreate) SetCreateTime(t time.Time) *RuleInfoCreate {
	ric.mutation.SetCreateTime(t)
	return ric
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ric *RuleInfoCreate) SetNillableCreateTime(t *time.Time) *RuleInfoCreate {
	if t != nil {
		ric.SetCreateTime(*t)
	}
	return ric
}

// SetEnable sets the "enable" field.
func (ric *RuleInfoCreate) SetEnable(b bool) *RuleInfoCreate {
	ric.mutation.SetEnable(b)
	return ric
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ric *RuleInfoCreate) SetNillableEnable(b *bool) *RuleInfoCreate {
	if b != nil {
		ric.SetEnable(*b)
	}
	return ric
}

// Mutation returns the RuleInfoMutation object of the builder.
func (ric *RuleInfoCreate) Mutation() *RuleInfoMutation {
	return ric.mutation
}

// Save creates the RuleInfo in the database.
func (ric *RuleInfoCreate) Save(ctx context.Context) (*RuleInfo, error) {
	ric.defaults()
	return withHooks[*RuleInfo, RuleInfoMutation](ctx, ric.sqlSave, ric.mutation, ric.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RuleInfoCreate) SaveX(ctx context.Context) *RuleInfo {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ric *RuleInfoCreate) Exec(ctx context.Context) error {
	_, err := ric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ric *RuleInfoCreate) ExecX(ctx context.Context) {
	if err := ric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ric *RuleInfoCreate) defaults() {
	if _, ok := ric.mutation.CreateTime(); !ok {
		v := ruleinfo.DefaultCreateTime
		ric.mutation.SetCreateTime(v)
	}
	if _, ok := ric.mutation.Enable(); !ok {
		v := ruleinfo.DefaultEnable
		ric.mutation.SetEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ric *RuleInfoCreate) check() error {
	if _, ok := ric.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`ent: missing required field "RuleInfo.module"`)}
	}
	if v, ok := ric.mutation.Module(); ok {
		if err := ruleinfo.ModuleValidator(v); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.module": %w`, err)}
		}
	}
	if _, ok := ric.mutation.PluginType(); !ok {
		return &ValidationError{Name: "plugin_type", err: errors.New(`ent: missing required field "RuleInfo.plugin_type"`)}
	}
	if v, ok := ric.mutation.PluginType(); ok {
		if err := ruleinfo.PluginTypeValidator(v); err != nil {
			return &ValidationError{Name: "plugin_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.plugin_type": %w`, err)}
		}
	}
	if _, ok := ric.mutation.FilterType(); !ok {
		return &ValidationError{Name: "filter_type", err: errors.New(`ent: missing required field "RuleInfo.filter_type"`)}
	}
	if v, ok := ric.mutation.FilterType(); ok {
		if err := ruleinfo.FilterTypeValidator(v); err != nil {
			return &ValidationError{Name: "filter_type", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.filter_type": %w`, err)}
		}
	}
	if _, ok := ric.mutation.RuleName(); !ok {
		return &ValidationError{Name: "rule_name", err: errors.New(`ent: missing required field "RuleInfo.rule_name"`)}
	}
	if v, ok := ric.mutation.RuleName(); ok {
		if err := ruleinfo.RuleNameValidator(v); err != nil {
			return &ValidationError{Name: "rule_name", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_name": %w`, err)}
		}
	}
	if _, ok := ric.mutation.RuleBody(); !ok {
		return &ValidationError{Name: "rule_body", err: errors.New(`ent: missing required field "RuleInfo.rule_body"`)}
	}
	if v, ok := ric.mutation.RuleBody(); ok {
		if err := ruleinfo.RuleBodyValidator(v); err != nil {
			return &ValidationError{Name: "rule_body", err: fmt.Errorf(`ent: validator failed for field "RuleInfo.rule_body": %w`, err)}
		}
	}
	if _, ok := ric.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "RuleInfo.create_time"`)}
	}
	if _, ok := ric.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "RuleInfo.enable"`)}
	}
	return nil
}

func (ric *RuleInfoCreate) sqlSave(ctx context.Context) (*RuleInfo, error) {
	if err := ric.check(); err != nil {
		return nil, err
	}
	_node, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ric.mutation.id = &_node.ID
	ric.mutation.done = true
	return _node, nil
}

func (ric *RuleInfoCreate) createSpec() (*RuleInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &RuleInfo{config: ric.config}
		_spec = sqlgraph.NewCreateSpec(ruleinfo.Table, sqlgraph.NewFieldSpec(ruleinfo.FieldID, field.TypeInt))
	)
	if value, ok := ric.mutation.Module(); ok {
		_spec.SetField(ruleinfo.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := ric.mutation.PluginType(); ok {
		_spec.SetField(ruleinfo.FieldPluginType, field.TypeString, value)
		_node.PluginType = value
	}
	if value, ok := ric.mutation.FilterType(); ok {
		_spec.SetField(ruleinfo.FieldFilterType, field.TypeString, value)
		_node.FilterType = value
	}
	if value, ok := ric.mutation.RuleName(); ok {
		_spec.SetField(ruleinfo.FieldRuleName, field.TypeString, value)
		_node.RuleName = value
	}
	if value, ok := ric.mutation.RuleBody(); ok {
		_spec.SetField(ruleinfo.FieldRuleBody, field.TypeString, value)
		_node.RuleBody = value
	}
	if value, ok := ric.mutation.CreateTime(); ok {
		_spec.SetField(ruleinfo.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ric.mutation.Enable(); ok {
		_spec.SetField(ruleinfo.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	return _node, _spec
}

// RuleInfoCreateBulk is the builder for creating many RuleInfo entities in bulk.
type RuleInfoCreateBulk struct {
	config
	builders []*RuleInfoCreate
}

// Save creates the RuleInfo entities in the database.
func (ricb *RuleInfoCreateBulk) Save(ctx context.Context) ([]*RuleInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ricb.builders))
	nodes := make([]*RuleInfo, len(ricb.builders))
	mutators := make([]Mutator, len(ricb.builders))
	for i := range ricb.builders {
		func(i int, root context.Context) {
			builder := ricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RuleInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ricb *RuleInfoCreateBulk) SaveX(ctx context.Context) []*RuleInfo {
	v, err := ricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ricb *RuleInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ricb *RuleInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ricb.Exec(ctx); err != nil {
		panic(err)
	}
}
